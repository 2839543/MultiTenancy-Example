<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/test"></property>
		<property name="user" value="root"></property>
		<property name="password" value="mylove"></property>
	</bean>
	
	<bean id="staffDao" class="com.saas.dao.impl.StaffDAOImpl" >
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 2. 配置hibernate 的SessionFactory实例 这个bean由spring提供 LocalSessionFactoryBean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		
		  
		<property name="dataSource" ref="dataSource"></property>
		
		<property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop> 
                <prop key="hibernate.multiTenancy">SCHEMA</prop> 
                <prop key="hibernate.tenant_identifier_resolver">com.saas.mt.TenantIdResolver</prop> 
                <prop key="hibernate.multi_tenant_connection_provider">com.saas.mt.SchemaBasedMultiTenantConnectionProvider</prop>      
            	<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> 
            	<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>  
                <!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> -->  
  
                <!-- c3p0 -->  
                <!-- 连接池hibernate配置 <prop key="hibernate.connection.provider_class">org.hibernate.connection.ProxoolConnectionProvider</prop> -->  
  
                <!-- 需要再次配置数据源,c3p0才起作用 -->  
                <prop key="hibernate.connection.provider_class">org.hibernate.service.jdbc.connections.internal.C3P0ConnectionProvider</prop>   
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>  
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/test</prop>  
                <prop key="hibernate.connection.username">root</prop>  
                <prop key="hibernate.connection.password">mylove</prop>  
  
                <!-- 连接池中JDBC连接的最小数量。Hibernate默认为1 -->  
                <prop key="hibernate.c3p0.min_size">3</prop>  
                <!-- 连接池中JDBC连接的最大数量。Hibernate默认为100 -->  
                <prop key="hibernate.c3p0.max_size">56</prop>  
                <!-- 何时从连接池中移除一个空闲的连接（以秒为单位）时。Hibernate默认为0，永不过期 -->  
                <prop key="hibernate.c3p0.timeout">321</prop>  
                <!-- 被缓存的预编译语句数量。用来提高性能。Hibernate默认为0，缓存不可用 -->  
                <prop key="c3p0.max_statements">255</prop>  
                <!-- 一个连接被自动验证前的闲置时间（以秒为单位）。Hibernate默认为0 -->  
                <prop key="hibernate.c3p0.idle_test_period">300</prop>  
                <!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->  
                <prop key="hibernate.c3p0.acquire_increment">2</prop>  
                <!-- 每次都验证连接是否可用 -->  
                <prop key="hibernate.c3p0.validate">true</prop>  
            </props>  
        </property>
        
        <property name="mappingLocations" value="classpath:com/saas/po/hbm/*.hbm.xml"></property>
    </bean>
	
	<!-- 配置spring声明时事务 -->
	
	<!-- 3. 配置事务管理器 有spring提供 HibernateTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 4. 通知 配置事务属性，需要事务管理器transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 事务的传播属性 -->
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="ad*" propagation="REQUIRED" />
			<tx:method name="updat*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 5. 配置事务的切点 AOP ,并把切点和事务属性关联起来	 -->
	<aop:config>
		<!-- 配置切点 -->
		<aop:pointcut expression="execution(* com.saas.service.impl.*.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>
	
	<context:component-scan base-package="com"/>

</beans>
